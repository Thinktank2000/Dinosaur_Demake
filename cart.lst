------- FILE Dinosaur_Demake.asm LEVEL 1 PASS 2
      1  fffe					      processor	6502	;define processor as 6502
      2  10000 ????
      3  10000 ????						;include required files-------------------------------------
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.07, 08/OCT/2021
      3  10000 ????
      4  10000 ????		00 6b	    VERSION_VCS =	107
      5  10000 ????
      6  10000 ????						; THIS IS *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at https://dasm-assembler.github.io/
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     16  10000 ????						; contents, or would like ot add something, please report as an issue at...
     17  10000 ????						; https://github.com/dasm-assembler/dasm/issues
     18  10000 ????
     19  10000 ????						;
     20  10000 ????						; Latest Revisions...
     21  10000 ????						; 1.07  08/OCT/2021	 Added timer interrupt registers
     22  10000 ????						; 1.06  05/SEP/2020	 Modified header/license and links to new versions
     23  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     24  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     25  10000 ????						;			    This will allow conditional code to verify VCS.H being
     26  10000 ????						;			    used for code assembly.
     27  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     28  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     29  10000 ????						;			 mirrored reading/writing differences.	This is more a
     30  10000 ????						;			 readability issue, and binary compatibility with disassembled
     31  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     32  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     33  10000 ????						;			 which was broken by the use of segments in this file, as
     34  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     35  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     36  10000 ????						; 1.01 		 Constant offset added to allow use for 3F-style bankswitching
     37  10000 ????						;			  - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     38  10000 ????						;			    it is safe to leave it undefined, and the base address will
     39  10000 ????						;			    be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     40  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     41  10000 ????						;			  - register definitions are now generated through assignment
     42  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     43  10000 ????						;			    address architecture.
     44  10000 ????						; 1.0	 22/MAR/2003	 Initial release
     45  10000 ????
     46  10000 ????
     47  10000 ????						;-------------------------------------------------------------------------------
     48  10000 ????
     49  10000 ????						; TIA_BASE_ADDRESS
     50  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     51  10000 ????						; Normally 0, the base address should (externally, before including this file)
     52  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     53  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     54  10000 ????						; < $40 as a bankswitch.
     55  10000 ????
     56  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     57  10000 ????			   -TIA_BASE_ADDRESS =	0
     58  10000 ????				       ENDIF
     59  10000 ????
     60  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     61  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     62  10000 ????						; *OR* by declaring the label before including this file, eg:
     63  10000 ????						; TIA_BASE_ADDRESS = $40
     64  10000 ????						;   include "vcs.h"
     65  10000 ????
     66  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     67  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     68  10000 ????						; for the mirrored ROM hardware registers.
     69  10000 ????
     70  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     71  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined,
     72  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     73  10000 ????
     74  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     75  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     76  10000 ????				       ENDIF
     77  10000 ????
     78  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     79  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     80  10000 ????				       ENDIF
     81  10000 ????
     82  10000 ????						;-------------------------------------------------------------------------------
     83  10000 ????
     84 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     85 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     86 U0000
     87 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     88 U0000
     89 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     90 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     91 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     92 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     93 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     94 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     95 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     96 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     97 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     98 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     99 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
    100 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    101 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    102 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    103 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    104 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    105 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    106 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    107 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    108 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    109 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    110 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    111 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    112 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    113 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    114 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    115 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    116 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    117 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    118 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    119 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    120 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    121 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    122 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    123 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    124 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    125 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    126 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    127 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    128 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    129 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    130 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    131 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    132 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    133 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    134 U002d
    135 U002d							;-------------------------------------------------------------------------------
    136 U002d
    137 U000e ????				      SEG.U	TIA_REGISTERS_READ
    138 U0000					      ORG	TIA_BASE_READ_ADDRESS
    139 U0000
    140 U0000							;					     bit 7   bit 6
    141 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    142 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    143 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    144 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    145 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    146 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    147 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    148 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    149 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    150 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    151 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    152 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    153 U000c		       00	   INPT4      ds	1	; $0C	     x000 0000	     Read Input (Trigger) 0
    154 U000d		       00	   INPT5      ds	1	; $0D	     x000 0000	     Read Input (Trigger) 1
    155 U000e
    156 U000e							;-------------------------------------------------------------------------------
    157 U000e
    158 U02a0 ????				      SEG.U	RIOT
    159 U0280					      ORG	$280
    160 U0280
    161 U0280							; RIOT MEMORY MAP
    162 U0280
    163 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    164 U0281							;	     Bits 4-7 for player 1.  Bits 0-3 for player 2.
    165 U0281
    166 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    167 U0282		       00	   SWCHB      ds	1	; $282      Port B data (console switches)
    168 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    169 U0284		       00	   INTIM      ds	1	; $284      Timer output (and disable timer interrupt)
    170 U0285
    171 U0285		       00	   TIMINT     ds	1	; $285      Read the interrupt flags
    172 U0286
    173 U0286							; Mirrored registers, part 1 ($285-$294)
    174 U0286
    175 U0286		       00		      ds	1	; $286      Mirror of INTIM
    176 U0287		       00		      ds	1	; $287      Mirror of TIMINT
    177 U0288		       00		      ds	1	; $288      Mirror of SWCHA
    178 U0289		       00		      ds	1	; $289      Mirror of SWACNT
    179 U028a		       00		      ds	1	; $28A      Mirror of SWCHB
    180 U028b		       00		      ds	1	; $28B      Mirror of SWBCNT
    181 U028c		       00		      ds	1	; $28C      Timer output (and enable timer interrupt)
    182 U028d		       00		      ds	1	; $28D      Mirror of TIMINT
    183 U028e		       00		      ds	1	; $28E      Mirror of $28C
    184 U028f		       00		      ds	1	; $28F      Mirror of TIMINT
    185 U0290		       00		      ds	1	; $290      Mirror of SWCHA
    186 U0291		       00		      ds	1	; $291      Mirror of SWACNT
    187 U0292		       00		      ds	1	; $292      Mirror of SWCHB
    188 U0293		       00		      ds	1	; $293      Mirror of SWBCNT
    189 U0294
    190 U0294		       00	   TIM1T      ds	1	; $294      set 1 clock interval (and disable timer interrupt)
    191 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval (and disable timer interrupt)
    192 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval (and disable timer interrupt)
    193 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval (and disable timer interrupt)
    194 U0298
    195 U0298							; Mirrored registers, part 2 ($298-$29b)
    196 U0298
    197 U0298		       00		      ds	1	; $298      Mirror of SWCHA
    198 U0299		       00		      ds	1	; $299      Mirror of SWACNT
    199 U029a		       00		      ds	1	; $29A      Mirror of SWCHB
    200 U029b		       00		      ds	1	; $29B      Mirror of SWBCNT
    201 U029c
    202 U029c		       00	   TIM1I      ds	1	; $29C      set 1 clock interval (and enable timer interrupt)
    203 U029d		       00	   TIM8I      ds	1	; $29D      set 8 clock interval (and enable timer interrupt)
    204 U029e		       00	   TIM64I     ds	1	; $29E      set 64 clock interval (and enable timer interrupt)
    205 U029f		       00	   T1024I     ds	1	; $29F      set 1024 clock interval (and enable timer interrupt)
    206 U02a0
    207 U02a0
    208 U02a0							;-------------------------------------------------------------------------------
    209 U02a0							; The following required for back-compatibility with code which does not use
    210 U02a0							; segments.
    211 U02a0
    212  0000 ????				      SEG
    213  0000 ????
    214  0000 ????						; EOF
------- FILE Dinosaur_Demake.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  0000 ????				      include	"macro.h"
      1  0000 ????						; MACRO.H
      2  0000 ????						; Version 1.09, 05/SEP/2020
      3  0000 ????
      4  0000 ????	       00 6d	   VERSION_MACRO =	109
      5  0000 ????
      6  0000 ????						;
      7  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  0000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  0000 ????						;
     10  0000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  0000 ????						; It is distributed as a companion machine-specific support package
     12  0000 ????						; for the DASM compiler.
     13  0000 ????						;
     14  0000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     15  0000 ????						; contents, or would like ot add something, please report as an issue at...
     16  0000 ????						; https://github.com/dasm-assembler/dasm/issues
     17  0000 ????
     18  0000 ????
     19  0000 ????						; Latest Revisions...
     20  0000 ????						; 1.09  05/SEP/2020	 - updated license/links
     21  0000 ????
     22  0000 ????						; 1.08  13/JUL/2020	 - added use of LXA to CLEAN_START
     23  0000 ????						; 1.07  19/JAN/2020	 - correction to comment VERTICAL_SYNC
     24  0000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_SYNC (Edwin Blink)
     25  0000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     26  0000 ????						;			   This will allow conditional code to verify MACRO.H being
     27  0000 ????						;			   used for code assembly.
     28  0000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     29  0000 ????						;
     30  0000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     31  0000 ????						;
     32  0000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     33  0000 ????						;			   (standardised macro for vertical synch code)
     34  0000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added.
     35  0000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     36  0000 ????						; 1.0	22/MAR/2003		Initial release
     37  0000 ????
     38  0000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage,
     39  0000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     40  0000 ????						;   If you do not allow illegal opcode usage, you must include this file
     41  0000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     42  0000 ????						;   registers and require them to be defined first).
     43  0000 ????
     44  0000 ????						; Available macros...
     45  0000 ????						;   SLEEP n		 - sleep for n cycles
     46  0000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     47  0000 ????						;   CLEAN_START	 - set machine to known state on startup
     48  0000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     49  0000 ????
     50  0000 ????						;-------------------------------------------------------------------------------
     51  0000 ????						; SLEEP duration
     52  0000 ????						; Original author: Thomas Jentzsch
     53  0000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     54  0000 ????						; useful for code where precise timing is required.
     55  0000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     56  0000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     57  0000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     58  0000 ????
     59  0000 ????				      MAC	sleep
     60  0000 ????			   .CYCLES    SET	{1}
     61  0000 ????
     62  0000 ????				      IF	.CYCLES < 2
     63  0000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     64  0000 ????				      ERR
     65  0000 ????				      ENDIF
     66  0000 ????
     67  0000 ????				      IF	.CYCLES & 1
     68  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     69  0000 ????				      nop	0
     70  0000 ????				      ELSE
     71  0000 ????				      bit	VSYNC
     72  0000 ????				      ENDIF
     73  0000 ????			   .CYCLES    SET	.CYCLES - 3
     74  0000 ????				      ENDIF
     75  0000 ????
     76  0000 ????				      REPEAT	.CYCLES / 2
     77  0000 ????				      nop
     78  0000 ????				      REPEND
     79  0000 ????				      ENDM		;usage: SLEEP n (n>1)
     80  0000 ????
     81  0000 ????						;-------------------------------------------------------------------------------
     82  0000 ????						; VERTICAL_SYNC
     83  0000 ????						; revised version by Edwin Blink -- saves bytes!
     84  0000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     85  0000 ????						; Note: Alters the accumulator
     86  0000 ????
     87  0000 ????						; OUT: A = 0
     88  0000 ????
     89  0000 ????				      MAC	vertical_sync
     90  0000 ????				      lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     91  0000 ????			   .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     92  0000 ????				      sta	VSYNC
     93  0000 ????				      lsr
     94  0000 ????				      bne	.VSLP1	; branch until VYSNC has been reset
     95  0000 ????				      ENDM
     96  0000 ????
     97  0000 ????						;-------------------------------------------------------------------------------
     98  0000 ????						; CLEAN_START
     99  0000 ????						; Original author: Andrew Davie
    100  0000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    101  0000 ????						; Sets stack pointer to $FF, and all registers to 0
    102  0000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    103  0000 ????						; Use as very first section of code on boot (ie: at reset)
    104  0000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    105  0000 ????
    106  0000 ????				      MAC	clean_start
    107  0000 ????				      sei
    108  0000 ????				      cld
    109  0000 ????
    110  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
    111  0000 ????				      lxa	#0
    112  0000 ????				      ELSE
    113  0000 ????				      ldx	#0
    114  0000 ????				      txa
    115  0000 ????				      ENDIF
    116  0000 ????				      tay
    117  0000 ????			   .CLEAR_STACK dex
    118  0000 ????				      txs
    119  0000 ????				      pha
    120  0000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  0000 ????
    122  0000 ????				      ENDM
    123  0000 ????
    124  0000 ????						;-------------------------------------------------------
    125  0000 ????						; SET_POINTER
    126  0000 ????						; Original author: Manuel Rotschkar
    127  0000 ????						;
    128  0000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  0000 ????						;
    130  0000 ????						; Usage: SET_POINTER pointer, address
    131  0000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  0000 ????						;
    133  0000 ????						; Note: Alters the accumulator, NZ flags
    134  0000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  0000 ????						; IN 2: absolute address
    136  0000 ????
    137  0000 ????				      MAC	set_pointer
    138  0000 ????			   .POINTER   SET	{1}
    139  0000 ????			   .ADDRESS   SET	{2}
    140  0000 ????
    141  0000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  0000 ????				      STA	.POINTER	; Store in pointer
    143  0000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    144  0000 ????				      STA	.POINTER+1	; Store in pointer+1
    145  0000 ????
    146  0000 ????				      ENDM
    147  0000 ????
    148  0000 ????						;-------------------------------------------------------
    149  0000 ????						; BOUNDARY byte#
    150  0000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    151  0000 ????						;
    152  0000 ????						; Push data to a certain position inside a page and keep count of how
    153  0000 ????						; many free bytes the programmer will have.
    154  0000 ????						;
    155  0000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    156  0000 ????
    157  0000 ????			   .FREE_BYTES SET	0
    158  0000 ????				      MAC	boundary
    159  0000 ????				      REPEAT	256
    160  0000 ????				      IF	<. % {1} = 0
    161  0000 ????				      MEXIT
    162  0000 ????				      ELSE
    163  0000 ????			   .FREE_BYTES SET	.FREE_BYTES + 1
    164  0000 ????				      .byte	$00
    165  0000 ????				      ENDIF
    166  0000 ????				      REPEND
    167  0000 ????				      ENDM
    168  0000 ????
    169  0000 ????
    170  0000 ????						; EOF
------- FILE Dinosaur_Demake.asm
      6  0000 ????
      7  0000 ????						;uninitialized segment for variables------------------------
      8 U0082 ????				      seg.u	variables
      9 U0080					      org	$80
     10 U0080
     11 U0080		       00	   DinoXPos   byte.b		;dinosaur X position
     12 U0081		       00	   DinoYPos   byte.b		;dinosaur Y position
     13 U0082
     14 U0082							;set constants----------------------------------------------
     15 U0082		       00 10	   DINO_HEIGHT =	16
     16 U0082
     17  10000 ????				       seg	code
     18  f000					      org	$F000
     19  f000
     20  f000				   reset
      0  f000					      CLEAN_START
      1  f000		       78		      sei
      2  f001		       d8		      cld
      3  f002
      4  f002					      IFNCONST	NO_ILLEGAL_OPCODES
      5  f002		       ab 00		      lxa	#0
      6  f004				  -	      ELSE
      7  f004				  -	      ldx	#0
      8  f004				  -	      txa
      9  f004					      ENDIF
     10  f004		       a8		      tay
     11  f005		       ca	   .CLEAR_STACK dex
     12  f006		       9a		      txs
     13  f007		       48		      pha
     14  f008		       d0 fb		      bne	.CLEAR_STACK
     15  f00a
     22  f00a
     23  f00a							;initialize variables---------------------------------------
     24  f00a		       a9 05		      lda	#5
     25  f00c		       85 80		      sta	DinoXPos
     26  f00e
     27  f00e							;start main display loop------------------------------------
     28  f00e				   StartFrame
     29  f00e		       a9 02		      lda	#2	;start VSYNC and VBLANK
     30  f010		       85 00		      sta	VSYNC
     31  f012		       85 01		      sta	VBLANK
     32  f014
     33  f014							;generate 3 lines of VSYNC----------------------------------
     34  f014					      REPEAT	3
     35  f014		       85 02		      sta	WSYNC
     34  f014					      REPEND
     35  f016		       85 02		      sta	WSYNC
     34  f016					      REPEND
     35  f018		       85 02		      sta	WSYNC
     36  f01a					      REPEND
     37  f01a		       a9 00		      lda	#0
     38  f01c		       85 00		      sta	VSYNC	;turn off VSYNC
     39  f01e
     40  f01e							;set horizontal position while in VBLANK-------------------
     41  f01e		       a5 80		      lda	DinoXPos	;load A with desired X position
     42  f020		       29 7f		      and	#$7F	;force bit 8 off to make a UINT
     43  f022		       85 02		      sta	WSYNC	;wait for a new scanline
     44  f024		       85 2b		      sta	HMCLR	;clear any previous positioning
     45  f026		       20 79 f2 	      jsr	SetHorizontalPosition
     46  f029
     47  f029							;generate 35 lines of VBLANK-------------------------------
     48  f029					      REPEAT	35
     49  f029		       85 02		      sta	WSYNC
     48  f029					      REPEND
     49  f02b		       85 02		      sta	WSYNC
     48  f02b					      REPEND
     49  f02d		       85 02		      sta	WSYNC
     48  f02d					      REPEND
     49  f02f		       85 02		      sta	WSYNC
     48  f02f					      REPEND
     49  f031		       85 02		      sta	WSYNC
     48  f031					      REPEND
     49  f033		       85 02		      sta	WSYNC
     48  f033					      REPEND
     49  f035		       85 02		      sta	WSYNC
     48  f035					      REPEND
     49  f037		       85 02		      sta	WSYNC
     48  f037					      REPEND
     49  f039		       85 02		      sta	WSYNC
     48  f039					      REPEND
     49  f03b		       85 02		      sta	WSYNC
     48  f03b					      REPEND
     49  f03d		       85 02		      sta	WSYNC
     48  f03d					      REPEND
     49  f03f		       85 02		      sta	WSYNC
     48  f03f					      REPEND
     49  f041		       85 02		      sta	WSYNC
     48  f041					      REPEND
     49  f043		       85 02		      sta	WSYNC
     48  f043					      REPEND
     49  f045		       85 02		      sta	WSYNC
     48  f045					      REPEND
     49  f047		       85 02		      sta	WSYNC
     48  f047					      REPEND
     49  f049		       85 02		      sta	WSYNC
     48  f049					      REPEND
     49  f04b		       85 02		      sta	WSYNC
     48  f04b					      REPEND
     49  f04d		       85 02		      sta	WSYNC
     48  f04d					      REPEND
     49  f04f		       85 02		      sta	WSYNC
     48  f04f					      REPEND
     49  f051		       85 02		      sta	WSYNC
     48  f051					      REPEND
     49  f053		       85 02		      sta	WSYNC
     48  f053					      REPEND
     49  f055		       85 02		      sta	WSYNC
     48  f055					      REPEND
     49  f057		       85 02		      sta	WSYNC
     48  f057					      REPEND
     49  f059		       85 02		      sta	WSYNC
     48  f059					      REPEND
     49  f05b		       85 02		      sta	WSYNC
     48  f05b					      REPEND
     49  f05d		       85 02		      sta	WSYNC
     48  f05d					      REPEND
     49  f05f		       85 02		      sta	WSYNC
     48  f05f					      REPEND
     49  f061		       85 02		      sta	WSYNC
     48  f061					      REPEND
     49  f063		       85 02		      sta	WSYNC
     48  f063					      REPEND
     49  f065		       85 02		      sta	WSYNC
     48  f065					      REPEND
     49  f067		       85 02		      sta	WSYNC
     48  f067					      REPEND
     49  f069		       85 02		      sta	WSYNC
     48  f069					      REPEND
     49  f06b		       85 02		      sta	WSYNC
     48  f06b					      REPEND
     49  f06d		       85 02		      sta	WSYNC
     50  f06f					      REPEND
     51  f06f		       a9 00		      lda	#0
     52  f071		       85 01		      sta	VBLANK	;turn off VBLANK
     53  f073
     54  f073							;clear TIA registers--------------------------------------
     55  f073		       a9 00		      lda	#0
     56  f075		       85 0d		      sta	PF0
     57  f077		       85 0e		      sta	PF1
     58  f079		       85 0f		      sta	PF2
     59  f07b		       85 1b		      sta	GRP0
     60  f07d		       85 1c		      sta	GRP1
     61  f07f
     62  f07f							;set background and playfield colours---------------------
     63  f07f		       a9 80		      lda	#$80
     64  f081		       85 09		      sta	COLUBK	;set background colour to blue
     65  f083		       a9 c3		      lda	#$C3
     66  f085		       85 08		      sta	COLUPF	;set playfield colour to green
     67  f087
     68  f087							;Draw 192 visible scanlines-------------------------------
     69  f087					      REPEAT	160	;wait 160 scanlines
     70  f087		       85 02		      sta	WSYNC
     69  f087					      REPEND
     70  f089		       85 02		      sta	WSYNC
     69  f089					      REPEND
     70  f08b		       85 02		      sta	WSYNC
     69  f08b					      REPEND
     70  f08d		       85 02		      sta	WSYNC
     69  f08d					      REPEND
     70  f08f		       85 02		      sta	WSYNC
     69  f08f					      REPEND
     70  f091		       85 02		      sta	WSYNC
     69  f091					      REPEND
     70  f093		       85 02		      sta	WSYNC
     69  f093					      REPEND
     70  f095		       85 02		      sta	WSYNC
     69  f095					      REPEND
     70  f097		       85 02		      sta	WSYNC
     69  f097					      REPEND
     70  f099		       85 02		      sta	WSYNC
     69  f099					      REPEND
     70  f09b		       85 02		      sta	WSYNC
     69  f09b					      REPEND
     70  f09d		       85 02		      sta	WSYNC
     69  f09d					      REPEND
     70  f09f		       85 02		      sta	WSYNC
     69  f09f					      REPEND
     70  f0a1		       85 02		      sta	WSYNC
     69  f0a1					      REPEND
     70  f0a3		       85 02		      sta	WSYNC
     69  f0a3					      REPEND
     70  f0a5		       85 02		      sta	WSYNC
     69  f0a5					      REPEND
     70  f0a7		       85 02		      sta	WSYNC
     69  f0a7					      REPEND
     70  f0a9		       85 02		      sta	WSYNC
     69  f0a9					      REPEND
     70  f0ab		       85 02		      sta	WSYNC
     69  f0ab					      REPEND
     70  f0ad		       85 02		      sta	WSYNC
     69  f0ad					      REPEND
     70  f0af		       85 02		      sta	WSYNC
     69  f0af					      REPEND
     70  f0b1		       85 02		      sta	WSYNC
     69  f0b1					      REPEND
     70  f0b3		       85 02		      sta	WSYNC
     69  f0b3					      REPEND
     70  f0b5		       85 02		      sta	WSYNC
     69  f0b5					      REPEND
     70  f0b7		       85 02		      sta	WSYNC
     69  f0b7					      REPEND
     70  f0b9		       85 02		      sta	WSYNC
     69  f0b9					      REPEND
     70  f0bb		       85 02		      sta	WSYNC
     69  f0bb					      REPEND
     70  f0bd		       85 02		      sta	WSYNC
     69  f0bd					      REPEND
     70  f0bf		       85 02		      sta	WSYNC
     69  f0bf					      REPEND
     70  f0c1		       85 02		      sta	WSYNC
     69  f0c1					      REPEND
     70  f0c3		       85 02		      sta	WSYNC
     69  f0c3					      REPEND
     70  f0c5		       85 02		      sta	WSYNC
     69  f0c5					      REPEND
     70  f0c7		       85 02		      sta	WSYNC
     69  f0c7					      REPEND
     70  f0c9		       85 02		      sta	WSYNC
     69  f0c9					      REPEND
     70  f0cb		       85 02		      sta	WSYNC
     69  f0cb					      REPEND
     70  f0cd		       85 02		      sta	WSYNC
     69  f0cd					      REPEND
     70  f0cf		       85 02		      sta	WSYNC
     69  f0cf					      REPEND
     70  f0d1		       85 02		      sta	WSYNC
     69  f0d1					      REPEND
     70  f0d3		       85 02		      sta	WSYNC
     69  f0d3					      REPEND
     70  f0d5		       85 02		      sta	WSYNC
     69  f0d5					      REPEND
     70  f0d7		       85 02		      sta	WSYNC
     69  f0d7					      REPEND
     70  f0d9		       85 02		      sta	WSYNC
     69  f0d9					      REPEND
     70  f0db		       85 02		      sta	WSYNC
     69  f0db					      REPEND
     70  f0dd		       85 02		      sta	WSYNC
     69  f0dd					      REPEND
     70  f0df		       85 02		      sta	WSYNC
     69  f0df					      REPEND
     70  f0e1		       85 02		      sta	WSYNC
     69  f0e1					      REPEND
     70  f0e3		       85 02		      sta	WSYNC
     69  f0e3					      REPEND
     70  f0e5		       85 02		      sta	WSYNC
     69  f0e5					      REPEND
     70  f0e7		       85 02		      sta	WSYNC
     69  f0e7					      REPEND
     70  f0e9		       85 02		      sta	WSYNC
     69  f0e9					      REPEND
     70  f0eb		       85 02		      sta	WSYNC
     69  f0eb					      REPEND
     70  f0ed		       85 02		      sta	WSYNC
     69  f0ed					      REPEND
     70  f0ef		       85 02		      sta	WSYNC
     69  f0ef					      REPEND
     70  f0f1		       85 02		      sta	WSYNC
     69  f0f1					      REPEND
     70  f0f3		       85 02		      sta	WSYNC
     69  f0f3					      REPEND
     70  f0f5		       85 02		      sta	WSYNC
     69  f0f5					      REPEND
     70  f0f7		       85 02		      sta	WSYNC
     69  f0f7					      REPEND
     70  f0f9		       85 02		      sta	WSYNC
     69  f0f9					      REPEND
     70  f0fb		       85 02		      sta	WSYNC
     69  f0fb					      REPEND
     70  f0fd		       85 02		      sta	WSYNC
     69  f0fd					      REPEND
     70  f0ff		       85 02		      sta	WSYNC
     69  f0ff					      REPEND
     70  f101		       85 02		      sta	WSYNC
     69  f101					      REPEND
     70  f103		       85 02		      sta	WSYNC
     69  f103					      REPEND
     70  f105		       85 02		      sta	WSYNC
     69  f105					      REPEND
     70  f107		       85 02		      sta	WSYNC
     69  f107					      REPEND
     70  f109		       85 02		      sta	WSYNC
     69  f109					      REPEND
     70  f10b		       85 02		      sta	WSYNC
     69  f10b					      REPEND
     70  f10d		       85 02		      sta	WSYNC
     69  f10d					      REPEND
     70  f10f		       85 02		      sta	WSYNC
     69  f10f					      REPEND
     70  f111		       85 02		      sta	WSYNC
     69  f111					      REPEND
     70  f113		       85 02		      sta	WSYNC
     69  f113					      REPEND
     70  f115		       85 02		      sta	WSYNC
     69  f115					      REPEND
     70  f117		       85 02		      sta	WSYNC
     69  f117					      REPEND
     70  f119		       85 02		      sta	WSYNC
     69  f119					      REPEND
     70  f11b		       85 02		      sta	WSYNC
     69  f11b					      REPEND
     70  f11d		       85 02		      sta	WSYNC
     69  f11d					      REPEND
     70  f11f		       85 02		      sta	WSYNC
     69  f11f					      REPEND
     70  f121		       85 02		      sta	WSYNC
     69  f121					      REPEND
     70  f123		       85 02		      sta	WSYNC
     69  f123					      REPEND
     70  f125		       85 02		      sta	WSYNC
     69  f125					      REPEND
     70  f127		       85 02		      sta	WSYNC
     69  f127					      REPEND
     70  f129		       85 02		      sta	WSYNC
     69  f129					      REPEND
     70  f12b		       85 02		      sta	WSYNC
     69  f12b					      REPEND
     70  f12d		       85 02		      sta	WSYNC
     69  f12d					      REPEND
     70  f12f		       85 02		      sta	WSYNC
     69  f12f					      REPEND
     70  f131		       85 02		      sta	WSYNC
     69  f131					      REPEND
     70  f133		       85 02		      sta	WSYNC
     69  f133					      REPEND
     70  f135		       85 02		      sta	WSYNC
     69  f135					      REPEND
     70  f137		       85 02		      sta	WSYNC
     69  f137					      REPEND
     70  f139		       85 02		      sta	WSYNC
     69  f139					      REPEND
     70  f13b		       85 02		      sta	WSYNC
     69  f13b					      REPEND
     70  f13d		       85 02		      sta	WSYNC
     69  f13d					      REPEND
     70  f13f		       85 02		      sta	WSYNC
     69  f13f					      REPEND
     70  f141		       85 02		      sta	WSYNC
     69  f141					      REPEND
     70  f143		       85 02		      sta	WSYNC
     69  f143					      REPEND
     70  f145		       85 02		      sta	WSYNC
     69  f145					      REPEND
     70  f147		       85 02		      sta	WSYNC
     69  f147					      REPEND
     70  f149		       85 02		      sta	WSYNC
     69  f149					      REPEND
     70  f14b		       85 02		      sta	WSYNC
     69  f14b					      REPEND
     70  f14d		       85 02		      sta	WSYNC
     69  f14d					      REPEND
     70  f14f		       85 02		      sta	WSYNC
     69  f14f					      REPEND
     70  f151		       85 02		      sta	WSYNC
     69  f151					      REPEND
     70  f153		       85 02		      sta	WSYNC
     69  f153					      REPEND
     70  f155		       85 02		      sta	WSYNC
     69  f155					      REPEND
     70  f157		       85 02		      sta	WSYNC
     69  f157					      REPEND
     70  f159		       85 02		      sta	WSYNC
     69  f159					      REPEND
     70  f15b		       85 02		      sta	WSYNC
     69  f15b					      REPEND
     70  f15d		       85 02		      sta	WSYNC
     69  f15d					      REPEND
     70  f15f		       85 02		      sta	WSYNC
     69  f15f					      REPEND
     70  f161		       85 02		      sta	WSYNC
     69  f161					      REPEND
     70  f163		       85 02		      sta	WSYNC
     69  f163					      REPEND
     70  f165		       85 02		      sta	WSYNC
     69  f165					      REPEND
     70  f167		       85 02		      sta	WSYNC
     69  f167					      REPEND
     70  f169		       85 02		      sta	WSYNC
     69  f169					      REPEND
     70  f16b		       85 02		      sta	WSYNC
     69  f16b					      REPEND
     70  f16d		       85 02		      sta	WSYNC
     69  f16d					      REPEND
     70  f16f		       85 02		      sta	WSYNC
     69  f16f					      REPEND
     70  f171		       85 02		      sta	WSYNC
     69  f171					      REPEND
     70  f173		       85 02		      sta	WSYNC
     69  f173					      REPEND
     70  f175		       85 02		      sta	WSYNC
     69  f175					      REPEND
     70  f177		       85 02		      sta	WSYNC
     69  f177					      REPEND
     70  f179		       85 02		      sta	WSYNC
     69  f179					      REPEND
     70  f17b		       85 02		      sta	WSYNC
     69  f17b					      REPEND
     70  f17d		       85 02		      sta	WSYNC
     69  f17d					      REPEND
     70  f17f		       85 02		      sta	WSYNC
     69  f17f					      REPEND
     70  f181		       85 02		      sta	WSYNC
     69  f181					      REPEND
     70  f183		       85 02		      sta	WSYNC
     69  f183					      REPEND
     70  f185		       85 02		      sta	WSYNC
     69  f185					      REPEND
     70  f187		       85 02		      sta	WSYNC
     69  f187					      REPEND
     70  f189		       85 02		      sta	WSYNC
     69  f189					      REPEND
     70  f18b		       85 02		      sta	WSYNC
     69  f18b					      REPEND
     70  f18d		       85 02		      sta	WSYNC
     69  f18d					      REPEND
     70  f18f		       85 02		      sta	WSYNC
     69  f18f					      REPEND
     70  f191		       85 02		      sta	WSYNC
     69  f191					      REPEND
     70  f193		       85 02		      sta	WSYNC
     69  f193					      REPEND
     70  f195		       85 02		      sta	WSYNC
     69  f195					      REPEND
     70  f197		       85 02		      sta	WSYNC
     69  f197					      REPEND
     70  f199		       85 02		      sta	WSYNC
     69  f199					      REPEND
     70  f19b		       85 02		      sta	WSYNC
     69  f19b					      REPEND
     70  f19d		       85 02		      sta	WSYNC
     69  f19d					      REPEND
     70  f19f		       85 02		      sta	WSYNC
     69  f19f					      REPEND
     70  f1a1		       85 02		      sta	WSYNC
     69  f1a1					      REPEND
     70  f1a3		       85 02		      sta	WSYNC
     69  f1a3					      REPEND
     70  f1a5		       85 02		      sta	WSYNC
     69  f1a5					      REPEND
     70  f1a7		       85 02		      sta	WSYNC
     69  f1a7					      REPEND
     70  f1a9		       85 02		      sta	WSYNC
     69  f1a9					      REPEND
     70  f1ab		       85 02		      sta	WSYNC
     69  f1ab					      REPEND
     70  f1ad		       85 02		      sta	WSYNC
     69  f1ad					      REPEND
     70  f1af		       85 02		      sta	WSYNC
     69  f1af					      REPEND
     70  f1b1		       85 02		      sta	WSYNC
     69  f1b1					      REPEND
     70  f1b3		       85 02		      sta	WSYNC
     69  f1b3					      REPEND
     70  f1b5		       85 02		      sta	WSYNC
     69  f1b5					      REPEND
     70  f1b7		       85 02		      sta	WSYNC
     69  f1b7					      REPEND
     70  f1b9		       85 02		      sta	WSYNC
     69  f1b9					      REPEND
     70  f1bb		       85 02		      sta	WSYNC
     69  f1bb					      REPEND
     70  f1bd		       85 02		      sta	WSYNC
     69  f1bd					      REPEND
     70  f1bf		       85 02		      sta	WSYNC
     69  f1bf					      REPEND
     70  f1c1		       85 02		      sta	WSYNC
     69  f1c1					      REPEND
     70  f1c3		       85 02		      sta	WSYNC
     69  f1c3					      REPEND
     70  f1c5		       85 02		      sta	WSYNC
     71  f1c7					      REPEND
     72  f1c7
     73  f1c7		       a0 10		      ldy	#DINO_HEIGHT	;counter to draw dino sprite
     74  f1c9				   DrawBitmap
     75  f1c9		       b9 8d f2 	      lda	DinoSprite,Y	;load slice of sprite
     76  f1cc		       85 1b		      sta	GRP0	;set graphics for dino
     77  f1ce		       b9 9d f2 	      lda	DinoColour,Y
     78  f1d1		       85 06		      sta	COLUP0	;set colour for dino
     79  f1d3
     80  f1d3		       85 02		      sta	WSYNC	;wait for a new scanline
     81  f1d5
     82  f1d5		       88		      dey
     83  f1d6		       d0 f1		      bne	DrawBitmap	;repeat next scanline until finished
     84  f1d8
     85  f1d8		       a9 00		      lda	#0
     86  f1da		       85 1b		      sta	GRP0	;disable dino graphics
     87  f1dc
     88  f1dc		       a9 ff		      lda	#$FF	;enable playfield
     89  f1de		       85 0d		      sta	PF0
     90  f1e0		       85 0e		      sta	PF1
     91  f1e2		       85 0f		      sta	PF2
     92  f1e4
     93  f1e4					      REPEAT	17	;wait remaining 17 scanlines
     94  f1e4		       85 02		      sta	WSYNC
     93  f1e4					      REPEND
     94  f1e6		       85 02		      sta	WSYNC
     93  f1e6					      REPEND
     94  f1e8		       85 02		      sta	WSYNC
     93  f1e8					      REPEND
     94  f1ea		       85 02		      sta	WSYNC
     93  f1ea					      REPEND
     94  f1ec		       85 02		      sta	WSYNC
     93  f1ec					      REPEND
     94  f1ee		       85 02		      sta	WSYNC
     93  f1ee					      REPEND
     94  f1f0		       85 02		      sta	WSYNC
     93  f1f0					      REPEND
     94  f1f2		       85 02		      sta	WSYNC
     93  f1f2					      REPEND
     94  f1f4		       85 02		      sta	WSYNC
     93  f1f4					      REPEND
     94  f1f6		       85 02		      sta	WSYNC
     93  f1f6					      REPEND
     94  f1f8		       85 02		      sta	WSYNC
     93  f1f8					      REPEND
     94  f1fa		       85 02		      sta	WSYNC
     93  f1fa					      REPEND
     94  f1fc		       85 02		      sta	WSYNC
     93  f1fc					      REPEND
     94  f1fe		       85 02		      sta	WSYNC
     93  f1fe					      REPEND
     94  f200		       85 02		      sta	WSYNC
     93  f200					      REPEND
     94  f202		       85 02		      sta	WSYNC
     93  f202					      REPEND
     94  f204		       85 02		      sta	WSYNC
     95  f206					      REPEND
     96  f206
     97  f206		       a9 00		      lda	#0	;disable playfield
     98  f208		       85 0d		      sta	PF0
     99  f20a		       85 0e		      sta	PF1
    100  f20c		       85 0f		      sta	PF2
    101  f20e
    102  f20e							;draw 30 lines of overscan-------------------------------
    103  f20e		       a9 02		      lda	#2
    104  f210		       85 01		      sta	VBLANK	;enable VBLANK
    105  f212
    106  f212					      REPEAT	30
    107  f212		       85 02		      sta	WSYNC
    106  f212					      REPEND
    107  f214		       85 02		      sta	WSYNC
    106  f214					      REPEND
    107  f216		       85 02		      sta	WSYNC
    106  f216					      REPEND
    107  f218		       85 02		      sta	WSYNC
    106  f218					      REPEND
    107  f21a		       85 02		      sta	WSYNC
    106  f21a					      REPEND
    107  f21c		       85 02		      sta	WSYNC
    106  f21c					      REPEND
    107  f21e		       85 02		      sta	WSYNC
    106  f21e					      REPEND
    107  f220		       85 02		      sta	WSYNC
    106  f220					      REPEND
    107  f222		       85 02		      sta	WSYNC
    106  f222					      REPEND
    107  f224		       85 02		      sta	WSYNC
    106  f224					      REPEND
    107  f226		       85 02		      sta	WSYNC
    106  f226					      REPEND
    107  f228		       85 02		      sta	WSYNC
    106  f228					      REPEND
    107  f22a		       85 02		      sta	WSYNC
    106  f22a					      REPEND
    107  f22c		       85 02		      sta	WSYNC
    106  f22c					      REPEND
    107  f22e		       85 02		      sta	WSYNC
    106  f22e					      REPEND
    107  f230		       85 02		      sta	WSYNC
    106  f230					      REPEND
    107  f232		       85 02		      sta	WSYNC
    106  f232					      REPEND
    107  f234		       85 02		      sta	WSYNC
    106  f234					      REPEND
    107  f236		       85 02		      sta	WSYNC
    106  f236					      REPEND
    107  f238		       85 02		      sta	WSYNC
    106  f238					      REPEND
    107  f23a		       85 02		      sta	WSYNC
    106  f23a					      REPEND
    107  f23c		       85 02		      sta	WSYNC
    106  f23c					      REPEND
    107  f23e		       85 02		      sta	WSYNC
    106  f23e					      REPEND
    107  f240		       85 02		      sta	WSYNC
    106  f240					      REPEND
    107  f242		       85 02		      sta	WSYNC
    106  f242					      REPEND
    107  f244		       85 02		      sta	WSYNC
    106  f244					      REPEND
    107  f246		       85 02		      sta	WSYNC
    106  f246					      REPEND
    107  f248		       85 02		      sta	WSYNC
    106  f248					      REPEND
    107  f24a		       85 02		      sta	WSYNC
    106  f24a					      REPEND
    107  f24c		       85 02		      sta	WSYNC
    108  f24e					      REPEND
    109  f24e
    110  f24e		       a9 00		      lda	#0
    111  f250		       85 01		      sta	VBLANK	;turn off VBLANK
    112  f252
    113  f252							;Controls----------------------------------------------
    114  f252				   DinoUp
    115  f252		       a9 10		      lda	#%00010000
    116  f254		       2c 80 02 	      bit	SWCHA
    117  f257		       d0 02		      bne	DinoDown
    118  f259		       e6 81		      inc	DinoYPos
    119  f25b
    120  f25b				   DinoDown
    121  f25b		       a9 20		      lda	#%00100000
    122  f25d		       2c 80 02 	      bit	SWCHA
    123  f260		       d0 02		      bne	DinoLeft
    124  f262		       c6 80		      dec	DinoXPos
    125  f264
    126  f264				   DinoLeft
    127  f264		       a9 40		      lda	#%01000000
    128  f266		       2c 80 02 	      bit	SWCHA
    129  f269		       d0 02		      bne	DinoRight
    130  f26b		       c6 80		      dec	DinoXPos
    131  f26d
    132  f26d				   DinoRight
    133  f26d		       a9 80		      lda	#%10000000
    134  f26f		       2c 80 02 	      bit	SWCHA
    135  f272		       d0 02		      bne	NoInput
    136  f274		       e6 80		      inc	DinoXPos
    137  f276
    138  f276				   NoInput
    139  f276							;Fallback if no input is detected
    140  f276
    141  f276							;loop to next frame-------------------------------------
    142  f276		       4c 0e f0 	      jmp	StartFrame
    143  f279
    144  f279
    145  f279							;subroutine to set horizontal position------------------
    146  f279				   SetHorizontalPosition subroutine
    147  f279		       38		      sec		;set carry flag
    148  f27a				   DivLoop
    149  f27a		       e9 0f		      sbc	#15	;subtract 15 from A
    150  f27c		       b0 fc		      bcs	DivLoop	;loop while flag is still set
    151  f27e
    152  f27e		       49 07		      eor	#7	;adjust remainder to a range of -8 to 7
    153  f280		       0a		      asl		;shift left 4 bits
    154  f281		       0a		      asl
    155  f282		       0a		      asl
    156  f283		       0a		      asl
    157  f284		       85 20		      sta	HMP0	;set fine position
    158  f286		       85 10		      sta	RESP0	;set rough position
    159  f288		       85 02		      sta	WSYNC	;wait for a new scanline
    160  f28a		       85 2a		      sta	HMOVE	;apply new fine offset
    161  f28c		       60		      rts
    162  f28d
    163  f28d
    164  f28d
    165  f28d
    166  f28d
    167  f28d							;---Graphics Data from PlayerPal 2600---
    168  f28d
    169  f28d				   DinoSprite
    170  f28d		       00		      .byte.b	#%00000000
    171  f28e		       14		      .byte.b	#%00010100	;$C8
    172  f28f		       14		      .byte.b	#%00010100	;$C8
    173  f290		       14		      .byte.b	#%00010100	;$C8
    174  f291		       14		      .byte.b	#%00010100	;$C8
    175  f292		       7c		      .byte.b	#%01111100	;$C8
    176  f293		       5c		      .byte.b	#%01011100	;$C8
    177  f294		       5c		      .byte.b	#%01011100	;$C8
    178  f295		       dc		      .byte.b	#%11011100	;$C8
    179  f296		       9c		      .byte.b	#%10011100	;$C8
    180  f297		       9c		      .byte.b	#%10011100	;$C8
    181  f298		       3f		      .byte.b	#%00111111	;$C8
    182  f299		       2e		      .byte.b	#%00101110	;$C8
    183  f29a		       2f		      .byte.b	#%00101111	;$C8
    184  f29b		       0d		      .byte.b	#%00001101	;$C8
    185  f29c		       0f		      .byte.b	#%00001111	;$C8
    186  f29d
    187  f29d				   DinoColour
    188  f29d		       00		      .byte.b	#$00	;
    189  f29e		       c8		      .byte.b	#$C8	;
    190  f29f		       c8		      .byte.b	#$C8	;
    191  f2a0		       c8		      .byte.b	#$C8	;
    192  f2a1		       c8		      .byte.b	#$C8	;
    193  f2a2		       c8		      .byte.b	#$C8	;
    194  f2a3		       c8		      .byte.b	#$C8	;
    195  f2a4		       c8		      .byte.b	#$C8	;
    196  f2a5		       c8		      .byte.b	#$C8	;
    197  f2a6		       c8		      .byte.b	#$C8	;
    198  f2a7		       c8		      .byte.b	#$C8	;
    199  f2a8		       c8		      .byte.b	#$C8	;
    200  f2a9		       c8		      .byte.b	#$C8	;
    201  f2aa		       c8		      .byte.b	#$C8	;
    202  f2ab		       c8		      .byte.b	#$C8	;
    203  f2ac		       c8		      .byte.b	#$C8	;
    204  f2ad
    205  f2ad							;end of ROM---------------------------------------------
    206  fffc					      org	$FFFC
    207  fffc		       00 f0		      .word.w	reset
    208  fffe		       00 f0		      .word.w	reset
